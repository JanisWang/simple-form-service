{"version":3,"sources":["components/SelectOption.js","components/SimpleForm.js","serviceWorker.js","index.js"],"names":["SelectOption","stateValue","this","props","value","Component","SimpleForm","state","firstName","lastName","email","states","handleSubmit","bind","handleChange","event","inputValue","target","stateField","name","setState","preventDefault","params","uuid4","axios","method","url","config","endpoint","data","then","console","log","catch","error","selectOption","map","element","push","className","onSubmit","type","onChange","maxLength","required","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4eAEqBA,G,uLAEb,IAAIC,EAAaC,KAAKC,MAAMF,WAC5B,OACI,4BAAQG,MAAOH,GAAaA,O,GAJEI,c,QCKrBC,E,YACnB,WAAYH,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,OAAQ,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,0EAYNE,GACX,IAAMC,EAAaD,EAAME,OAAOb,MAC1Bc,EAAaH,EAAME,OAAOE,KAChCjB,KAAKkB,SAAL,eACGF,EAAaF,M,4EAGCD,G,wFACjBA,EAAMM,iB,EACyCnB,KAAKK,MAA5CC,E,EAAAA,UAAWC,E,EAAAA,SAAUC,E,EAAAA,MAAOC,E,EAAAA,OAChCW,EAAS,CACX,GAAM,OAASC,MACf,UAAY,GAAZ,OAAgBf,GAChB,SAAW,GAAX,OAAeC,GACf,MAAQ,GAAR,OAAYC,GACZ,OAAS,GAAT,OAAaC,I,SAETa,IACJ,CACEC,OAAQ,OACRC,IAAKC,EAAOC,SACZC,KAAMP,IAENQ,MAAK,SAASD,GACZE,QAAQC,IAAI,8BACfC,OAAM,SAASC,GACZH,QAAQC,IAAIE,M,sIAKlB,IAAIC,EAAe,GAKnB,MAJgB,CAAC,MAAO,MAAO,KAAM,KAAM,MAAO,MAAO,KAAM,UACrDC,KAAI,SAACC,GACbF,EAAaG,KAAK,kBAAC,EAAD,CAAcrC,WAAYoC,QAG1C,0BAAME,UAAU,aAAaC,SAAUtC,KAAKU,cAC1C,+BAAO,yBAAK2B,UAAU,aAAf,KAAP,cACA,2BAAOA,UAAU,UAAUE,KAAK,OAAOtB,KAAK,YAAYuB,SAAUxC,KAAKY,aAAcV,MAAOF,KAAKK,MAAMC,UAAWmC,UAAU,KAAKC,UAAQ,IACzI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,aACA,2BAAOA,UAAU,UAAUE,KAAK,OAAOtB,KAAK,WAAWuB,SAAUxC,KAAKY,aAAcV,MAAOF,KAAKK,MAAME,SAAUkC,UAAU,KAAKC,UAAQ,IACvI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,UACA,2BAAOA,UAAU,UAAUE,KAAK,QAAQtB,KAAK,QAAQuB,SAAUxC,KAAKY,aAAcV,MAAOF,KAAKK,MAAMG,MAAOiC,UAAU,MAAMC,UAAQ,IACnI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,WACA,4BAAQA,UAAU,UAAUpB,KAAK,SAASuB,SAAUxC,KAAKY,aAAc8B,UAAQ,GAC7E,4BAAQxC,MAAM,IAAd,KACC+B,GAEH,4BAAQM,KAAK,UAAb,a,GA9D8BpC,aCKpBwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.23d0bf48.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class SelectOption extends Component {\n    render() {\n        let stateValue = this.props.stateValue;\n        return (\n            <option value={stateValue}>{stateValue}</option>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport uuid4 from 'uuid4';\nimport \"./SimpleForm.css\";\nimport SelectOption from \"./SelectOption.js\";\nimport config from \"../config.json\"\n\nexport default class SimpleForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      states: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const inputValue = event.target.value;\n    const stateField = event.target.name;\n    this.setState({\n      [stateField]: inputValue,\n    });\n  }\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { firstName, lastName, email, states } = this.state;\n    let params = {\n      \"id\": \"usr-\" + uuid4(),\n      \"firstName\": `${firstName}`,\n      \"lastName\": `${lastName}`,\n      \"email\": `${email}`,\n      \"states\": `${states}`\n    }\n    await axios(\n      {\n        method: 'post',\n        url: config.endpoint,\n        data: params\n      }\n      ).then(function(data){\n          console.log(\"Adding data into db ...\");\n    }).catch(function(error){\n          console.log(error);\n    });\n  }\n\n  render() {\n    let selectOption = [];\n    let stateList = ['NSW', 'VIC', 'WA', 'SA', 'TAS', 'QLD', 'NT', 'LALALA'];\n    stateList.map((element)=>{\n      selectOption.push(<SelectOption stateValue={element} />);\n    })\n    return (\n        <form className=\"simpleForm\" onSubmit={this.handleSubmit}>\n          <label><div className=\"sfAsterix\">*</div>FirstName:</label>\n          <input className=\"sfInput\" type=\"text\" name=\"firstName\" onChange={this.handleChange} value={this.state.firstName} maxLength=\"50\" required />\n          <label><div className=\"sfAsterix\">*</div>LastName:</label>\n          <input className=\"sfInput\" type=\"text\" name=\"lastName\" onChange={this.handleChange} value={this.state.lastName} maxLength=\"50\" required />\n          <label><div className=\"sfAsterix\">*</div>Email:</label>\n          <input className=\"sfInput\" type=\"email\" name=\"email\" onChange={this.handleChange} value={this.state.email} maxLength=\"255\" required />\n          <label><div className=\"sfAsterix\">*</div>State: </label>\n          <select className=\"sfInput\" name=\"states\" onChange={this.handleChange} required >\n            <option value=''>-</option>\n            {selectOption}\n          </select>\n          <button type=\"submit\">Send</button>\n        </form>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SimpleForm from './components/SimpleForm';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SimpleForm />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}