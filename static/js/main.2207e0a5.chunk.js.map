{"version":3,"sources":["components/SimpleForm.js","serviceWorker.js","index.js"],"names":["SimpleForm","props","state","firstName","lastName","email","states","handleSubmit","bind","handleChange","event","inputValue","target","value","stateField","name","this","setState","console","log","preventDefault","axios","post","config","endpoint","uuid4","className","onSubmit","type","onChange","maxLength","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"igBAMqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,OAAQ,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,0EAYNE,GACX,IAAMC,EAAaD,EAAME,OAAOC,MAC1BC,EAAaJ,EAAME,OAAOG,KAChCC,KAAKC,SAAL,eACGH,EAAaH,IAEhBO,QAAQC,IAAIH,KAAKd,S,4EAEAQ,G,sFACjBA,EAAMU,iB,EACyCJ,KAAKd,MAA5CC,E,EAAAA,UAAWC,E,EAAAA,SAAUC,E,EAAAA,MAAOC,E,EAAAA,O,SAC9Be,IAAMC,KACVC,EAAOC,SACP,CACE,GAAM,OAASC,MACf,UAAY,GAAZ,OAAgBtB,GAChB,SAAW,GAAX,OAAeC,GACf,MAAQ,GAAR,OAAYC,GACZ,OAAS,GAAT,OAAaC,K,sIAMjB,OACE,6BACE,0BAAMoB,UAAU,aAAaC,SAAUX,KAAKT,cAC1C,+BAAO,yBAAKmB,UAAU,aAAf,KAAP,cACA,2BAAOA,UAAU,UAAUE,KAAK,OAAOb,KAAK,YAAYc,SAAUb,KAAKP,aAAcI,MAAOG,KAAKd,MAAMC,UAAW2B,UAAU,KAAKC,UAAQ,IACzI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,aACA,2BAAOA,UAAU,UAAUE,KAAK,OAAOb,KAAK,WAAWc,SAAUb,KAAKP,aAAcI,MAAOG,KAAKd,MAAME,SAAU0B,UAAU,KAAKC,UAAQ,IACvI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,UACA,2BAAOA,UAAU,UAAUE,KAAK,QAAQb,KAAK,QAAQc,SAAUb,KAAKP,aAAcI,MAAOG,KAAKd,MAAMG,MAAOyB,UAAU,MAAMC,UAAQ,IACnI,+BAAO,yBAAKL,UAAU,aAAf,KAAP,WACA,4BAAQA,UAAU,UAAUX,KAAK,SAASc,SAAUb,KAAKP,aAAcsB,UAAQ,GAC7E,4BAAQlB,MAAM,IAAd,KACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,MAAd,OAEF,4BAAQe,KAAK,UAAb,c,GAzD8BI,aCMpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2207e0a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport uuid4 from 'uuid4';\nimport \"./SimpleForm.css\";\nimport config from \"../config.json\"\n\nexport default class SimpleForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      states: '',\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const inputValue = event.target.value;\n    const stateField = event.target.name;\n    this.setState({\n      [stateField]: inputValue,\n    });\n    console.log(this.state);\n  }\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { firstName, lastName, email, states } = this.state;\n    await axios.post(\n      config.endpoint,\n      {\n        \"id\": \"usr-\" + uuid4(),\n        \"firstName\": `${firstName}`,\n        \"lastName\": `${lastName}`,\n        \"email\": `${email}`,\n        \"states\": `${states}`\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form className=\"simpleForm\" onSubmit={this.handleSubmit}>\n          <label><div className=\"sfAsterix\">*</div>FirstName:</label>\n          <input className=\"sfInput\" type=\"text\" name=\"firstName\" onChange={this.handleChange} value={this.state.firstName} maxLength=\"50\" required />\n          <label><div className=\"sfAsterix\">*</div>LastName:</label>\n          <input className=\"sfInput\" type=\"text\" name=\"lastName\" onChange={this.handleChange} value={this.state.lastName} maxLength=\"50\" required />\n          <label><div className=\"sfAsterix\">*</div>Email:</label>\n          <input className=\"sfInput\" type=\"email\" name=\"email\" onChange={this.handleChange} value={this.state.email} maxLength=\"255\" required />\n          <label><div className=\"sfAsterix\">*</div>State: </label>\n          <select className=\"sfInput\" name=\"states\" onChange={this.handleChange} required >\n            <option value=''>-</option>\n            <option value='NSW'>NSW</option>\n            <option value='VIC'>VIC</option>\n            <option value='WA'>WA</option>\n            <option value='SA'>SA</option>\n            <option value='TAS'>TAS</option>\n            <option value='QLD'>QLD</option>\n            <option value='NT'>NT</option>\n          </select>\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SimpleForm from './components/SimpleForm';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SimpleForm />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}